// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WriteMe.Data;

namespace WriteMe.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200915121347_InitialWithGoogleAuth")]
    partial class InitialWithGoogleAuth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "fd93520a-ff1a-4522-b03a-18d7c60fc9a7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "eae0ad0b-87d4-4d9e-87a6-36ef72bece1e",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WriteMe.Data.Entities.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FriendListId")
                        .HasColumnType("int");

                    b.HasKey("ChatId");

                    b.HasIndex("FriendListId")
                        .IsUnique();

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            ChatId = 1,
                            FriendListId = 1
                        });
                });

            modelBuilder.Entity("WriteMe.Data.Entities.FriendList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FriendsRelationshipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FriendsRelationshipId");

                    b.ToTable("FriendLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FriendsRelationshipId = 1
                        });
                });

            modelBuilder.Entity("WriteMe.Data.Entities.FriendListUser", b =>
                {
                    b.Property<int>("FriendListId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FriendListId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FriendListUser");

                    b.HasData(
                        new
                        {
                            FriendListId = 1,
                            UserId = 1
                        },
                        new
                        {
                            FriendListId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("WriteMe.Data.Entities.FriendsRelationship", b =>
                {
                    b.Property<int>("FriendsRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FriendsRelationshipId");

                    b.ToTable("FriendsRelationships");

                    b.HasData(
                        new
                        {
                            FriendsRelationshipId = 1,
                            Name = "Friend"
                        },
                        new
                        {
                            FriendsRelationshipId = 2,
                            Name = "Blocked"
                        });
                });

            modelBuilder.Entity("WriteMe.Data.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("RelatingUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.HasIndex("ChatId");

                    b.HasIndex("RelatedUserId");

                    b.HasIndex("RelatingUserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            ChatId = 1,
                            RelatedUserId = 1,
                            RelatingUserId = 2,
                            SendingTime = new DateTime(2020, 9, 14, 22, 0, 0, 0, DateTimeKind.Local),
                            Text = "Hello, Vika"
                        },
                        new
                        {
                            MessageId = 2,
                            ChatId = 1,
                            RelatedUserId = 2,
                            RelatingUserId = 1,
                            SendingTime = new DateTime(2020, 9, 14, 22, 10, 0, 0, DateTimeKind.Local),
                            Text = "Hello, Julie"
                        },
                        new
                        {
                            MessageId = 3,
                            ChatId = 1,
                            RelatedUserId = 1,
                            RelatingUserId = 2,
                            SendingTime = new DateTime(2020, 9, 14, 22, 15, 0, 0, DateTimeKind.Local),
                            Text = "How are you?"
                        },
                        new
                        {
                            MessageId = 4,
                            ChatId = 1,
                            RelatedUserId = 2,
                            RelatingUserId = 1,
                            SendingTime = new DateTime(2020, 9, 14, 22, 20, 0, 0, DateTimeKind.Local),
                            Text = "Good"
                        },
                        new
                        {
                            MessageId = 5,
                            ChatId = 1,
                            RelatedUserId = 1,
                            RelatingUserId = 2,
                            SendingTime = new DateTime(2020, 9, 14, 22, 25, 0, 0, DateTimeKind.Local),
                            Text = "Me too"
                        },
                        new
                        {
                            MessageId = 6,
                            ChatId = 1,
                            RelatedUserId = 1,
                            RelatingUserId = 2,
                            SendingTime = new DateTime(2020, 9, 14, 22, 30, 0, 0, DateTimeKind.Local),
                            Text = "Flexim? Vika"
                        },
                        new
                        {
                            MessageId = 7,
                            ChatId = 1,
                            RelatedUserId = 1,
                            RelatingUserId = 2,
                            SendingTime = new DateTime(2020, 9, 13, 22, 0, 0, 0, DateTimeKind.Local),
                            Text = "Hello, Vika"
                        },
                        new
                        {
                            MessageId = 8,
                            ChatId = 1,
                            RelatedUserId = 2,
                            RelatingUserId = 1,
                            SendingTime = new DateTime(2020, 9, 13, 22, 10, 0, 0, DateTimeKind.Local),
                            Text = "Hello, Julie"
                        },
                        new
                        {
                            MessageId = 9,
                            ChatId = 1,
                            RelatedUserId = 1,
                            RelatingUserId = 2,
                            SendingTime = new DateTime(2020, 9, 13, 22, 15, 0, 0, DateTimeKind.Local),
                            Text = "How are you?"
                        },
                        new
                        {
                            MessageId = 10,
                            ChatId = 1,
                            RelatedUserId = 2,
                            RelatingUserId = 1,
                            SendingTime = new DateTime(2020, 9, 13, 22, 20, 0, 0, DateTimeKind.Local),
                            Text = "Good"
                        },
                        new
                        {
                            MessageId = 11,
                            ChatId = 1,
                            RelatedUserId = 1,
                            RelatingUserId = 2,
                            SendingTime = new DateTime(2020, 9, 13, 22, 25, 0, 0, DateTimeKind.Local),
                            Text = "Me too"
                        },
                        new
                        {
                            MessageId = 12,
                            ChatId = 1,
                            RelatedUserId = 1,
                            RelatingUserId = 2,
                            SendingTime = new DateTime(2020, 9, 13, 22, 30, 0, 0, DateTimeKind.Local),
                            Text = "Flexim? Vika"
                        });
                });

            modelBuilder.Entity("WriteMe.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "688fc33f-c39f-42b3-8559-c952843c6108",
                            Email = "jylie@mail.com",
                            EmailConfirmed = true,
                            LastActivityTime = new DateTime(2020, 9, 14, 15, 13, 46, 573, DateTimeKind.Local).AddTicks(5521),
                            LockoutEnabled = false,
                            NormalizedEmail = "JYLIE@GMAIL.COM",
                            NormalizedUserName = "JYLIE@MAIL.COM",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "",
                            TwoFactorEnabled = false,
                            UserName = "jylie@mail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd4942c7-ba70-4b04-8c8b-5b7df6b643d2",
                            Email = "vika@mail.com",
                            EmailConfirmed = true,
                            LastActivityTime = new DateTime(2020, 9, 14, 15, 13, 46, 575, DateTimeKind.Local).AddTicks(3012),
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKA@GMAIL.COM",
                            NormalizedUserName = "VIKA@MAIL.COM",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "",
                            TwoFactorEnabled = false,
                            UserName = "vika@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("WriteMe.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("WriteMe.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WriteMe.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("WriteMe.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WriteMe.Data.Entities.Chat", b =>
                {
                    b.HasOne("WriteMe.Data.Entities.FriendList", "FriendList")
                        .WithOne("Chat")
                        .HasForeignKey("WriteMe.Data.Entities.Chat", "FriendListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WriteMe.Data.Entities.FriendList", b =>
                {
                    b.HasOne("WriteMe.Data.Entities.FriendsRelationship", "FriendsRelationship")
                        .WithMany()
                        .HasForeignKey("FriendsRelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WriteMe.Data.Entities.FriendListUser", b =>
                {
                    b.HasOne("WriteMe.Data.Entities.FriendList", "FriendList")
                        .WithMany("FriendListUsers")
                        .HasForeignKey("FriendListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WriteMe.Data.Entities.User", "User")
                        .WithMany("FriendListUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WriteMe.Data.Entities.Message", b =>
                {
                    b.HasOne("WriteMe.Data.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WriteMe.Data.Entities.User", "RelatedUser")
                        .WithMany("RelatedMessage")
                        .HasForeignKey("RelatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WriteMe.Data.Entities.User", "RelatingUser")
                        .WithMany("RelatingMessages")
                        .HasForeignKey("RelatingUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
